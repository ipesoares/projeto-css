#!/usr/bin/env node
import chalk from 'chalk';
import meow from 'meow';
import updateNotifier from 'update-notifier';

import pkg from '../package';
import { log, z, error, Commands } from './lib/utils';
import * as manager from './lib/manager';
import * as Gist from './lib/gist';

updateNotifier({ pkg }).notify();

function exit() {
  log(chalk`See {cyan.bold manager help}`);
  process.exit(1);
}

const { input, help } = meow(
  chalk`
Usage:
  $ ko <option> [args]

Options:
  save            Save the file at a path as a manager link
  add             Create the file attached to a manager link in the current working directory
  list            List all saved manager links
  reset           Delete your local manager config
  help          Show this prompt

Examples:
  $ manager save .gitignore=gignore tslint.json=tsl tsconfig.json=tsc
  $ manager add gignore tsl tsc
`,
  {
    flags: {
      help: {
        alias: 'h'
      },
      version: {
        alias: 'v'
      }
    }
  }
);

function validateInput() {
  if (input.length === 0) {
    log(`${error} At least one argument required.`);
    exit();
  }

  if (!(input[0] in Commands)) {
    log(`${error} Commands "${input[0]}" not found.`);
    exit();
  }

  if (input[0] === 'init') {
    log(`${error} manager must be initialized with a token.`);
    log(
      chalk`Run {cyan.bold manager init <token>} or see {cyan.bold manager --help}.`
    );
    log(
      `Create a new API token at ${chalk.green.bold(
        'https://github.com/settings/tokens'
      )}.`
    );

    process.exit(1);
  }
}

export default () => {
  validateInput();
  let [command, ...args] = input;
  log(`${z} ${command}`);

  switch (command) {
    case Commands.help:
      log(help);
      break;

    case Commands.save:
      manager.save(args);
      break;

    case Commands.add:
      manager.add(args);
      break;

    case Commands.list:
      manager.list();
      break;

    case Commands.print:
      manager.print(args[0]);
      break;

    case Commands.reset:
      manager.reset();
      break;

    case Commands.remove:
      // manager.remove(input[1]);
      break;

    case Commands.rename:
      // manager.rename(input.slice(1));
      break;

    case Commands.init:
      Gist.init(input);
      break;

    case Commands.backup:
      Gist.backup();
      break;

    default:
      console.log(`${error} Something weird happened => '${input.join(' ')}'.`);
      break;
  }
};
