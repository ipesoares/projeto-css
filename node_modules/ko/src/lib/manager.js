import fs from 'fs';
import { basename } from 'path';
import Ora from 'ora';
import chalk from 'chalk';
import Conf from 'conf';
import pify from 'pify';

import {
  log,
  z,
  error,
  getFileContent,
  getFileAsJson,
  invariant
} from './utils';

const config = new Conf();

export function save(input) {
  input.forEach(file => {
    let [filePath, link] = file.split('=');
    link = link || basename(filePath);
    let spinner = new Ora().start();

    pify(fs.lstat)(filePath)
      .then(stats => {
        if (stats.isDirectory()) {
          return spinner.fail(`'${filePath}' appears to be a directory.`);
        }

        if (stats.isFile()) {
          config.set(link, {
            content: getFileContent(filePath),
            path: basename(filePath)
          });

          invariant(config.has(link));
          return spinner.succeed(`'${filePath}' saved as '${link}'.`);
        }
      })
      .catch(() => {
        log(filePath, link);
        spinner.fail(`'${filePath}' does not exist.`);
      });
  });
}

export function add(input) {
  let zoeConfig = getFileAsJson(config.path);

  input.forEach(name => {
    let spinner = new Ora().start(`Creating ${name}`);

    if (config.has(name)) {
      let { path, content } = zoeConfig[name];

      return pify(fs.writeFile)(path, content)
        .then(() => spinner.succeed(`Created '${name}' as '${path}'`))
        .catch(() => {
          spinner.fail(`'${name}' does not exist.`);
        });
    }

    return spinner.fail(`'${name}' does not exist.`);
  });
}

export function list() {
  log(chalk`Config {cyan.bold =>}`, config.path);

  let configJSON = getFileAsJson(config.path);
  Object.keys(configJSON).forEach(key =>
    log(chalk`${key} {cyan.bold =>} ${configJSON[key].path}`)
  );
}

export function print(input) {
  let link = config.get(input);

  if (link) {
    log('===============\n');
    log(link.content);
    return;
  }

  log(`${error} ${input} does not exist in your ${z} config.`);
}

export function reset() {
  let spinner = new Ora(`Resetting ${z}`).start();
  config.clear();
  spinner.succeed();
  log(`${z} has been reset. You must run ${z} init`);
}

export function remove(input) {
  config.delete(input);
}

export function rename(input, link) {
  config.set(link, config.get(input).content);
  remove(input);
}
