import fs from 'fs';
import Conf from 'conf';
import chalk from 'chalk';
import fetch from 'node-fetch';

// Extract console.log
export const { log } = console;

// Some useful export constants
export const z = chalk.cyan.bold('zoe');
export const error = chalk.red.bold('Error:');
export const success = chalk.green.bold('Success:');
export const tokenKey = 'gist-token';

export const Commands = {
  add: 'add',
  save: 'save',
  list: 'list',
  print: 'print',
  reset: 'init',
  help: 'help',
  group: 'group',
  new: 'new',
  backup: 'backup',
  init: 'init',
  remove: 'remove',
  rename: 'rename'
};

// Zoe utils
export const getFileContent = path => fs.readFileSync(path).toString();
export const getFileAsJson = path => JSON.parse(getFileContent(path));

export const zip = (saveNames, paths, contents) =>
  saveNames.reduce(
    (obj, k, i) => ({ ...obj, [k]: { path: paths[i], content: contents[i] } }),
    {}
  );

// Based on https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/__forks__/invariant.js
export function invariant(condition, message, ...args) {
  if (message === undefined) {
    throw new Error('invariant(...): Second argument must be a string.');
  }

  if (!condition) {
    let argIndex = 0;
    let invariantError = new Error(
      message.replace(/%s/g, () => String(args[argIndex++]))
    );
    invariantError.name = chalk.bold.red('Invariant Violation');

    throw invariantError;
  }
}

// Gist API utils
export const configToken = new Conf().get(tokenKey);

export const api = token =>
  `https://api.github.com/gists?access_token=${token || configToken}`;

export const request = (options, token) => fetch(`${api(token)}`, options);
